##Gathering data from url directly (use ebert_reviews as an example)
import requests
import os
# Make directory if it doesn't already exist
folder_name = 'ebert_reviews'
if not os.path.exists(folder_name):
    os.makedirs(folder_name)
for url in ebert_review_urls: # write a for loop if ebert_review is a list of urls
    response=requests.get(url)
    with open(os.path.join(folder_name,url.split('/')[-1]),mode='wb') as file:
        file.write(response.content)
#check if all files downloaded in the directory specified
os.listdir(folder_name)

##Solution test:If an AssertionError is thrown, your solution is incorrect.
import filecmp
dc = filecmp.dircmp('ebert_reviews', 'ebert_reviews_solution')
assert len(dc.common) == 88
--------------------------------------------------------------------------------
###Gathering data from HTML if HTML files are downloaded already
from bs4 import BeautifulSoup
import os
import pandas as pd
## List of dictionaries to build file by file and later convert to a DataFrame
# Good practice to check if the loop works
df_list = []
folder = 'rt_html'
for movie_html in os.listdir(folder):
    with open(os.path.join(folder, movie_html)) as file:
        # Your code here
        # Note: a correct implementation may take ~15 seconds to run
        soup=BeautifulSoup(file,'lxml')
        title=soup.find('title').contents[0][:-len(' - Rotten Tomatoes')]
        print(title)
        break
# Full code:
for movie_html in os.listdir(folder):
    with open(os.path.join(folder, movie_html)) as file:
        # Note: a correct implementation may take ~15 seconds to run
        soup=BeautifulSoup(file,'lxml')
        title=soup.find('title').contents[0][:-len(' - Rotten Tomatoes')]
        audience_score=soup.find('div',class_='audience-score meter').find('span').contents[0][:-1]
        num_audience_ratings=soup.find('div',class_='audience-info hidden-xs superPageFontColor')
        num_audience_ratings=num_audience_ratings.find_all('div')[1].contents[2].strip().replace(',','')
        # Append to list of dictionaries
        df_list.append({'title': title,
                        'audience_score': int(audience_score),
                        'number_of_audience_ratings': int(num_audience_ratings)})
df = pd.DataFrame(df_list, columns = ['title', 'audience_score', 'number_of_audience_ratings'])

## Solution test
df_solution = pd.read_pickle('df_solution.pkl')
df.sort_values('title', inplace = True)
df.reset_index(inplace = True, drop = True)
df_solution.sort_values('title', inplace = True)
df_solution.reset_index(inplace = True, drop = True)
pd.testing.assert_frame_equal(df, df_solution)
-----------------------------------------------------------------------------
##Links: 
1-WordCloud for Python documentation[https://amueller.github.io/word_cloud/]
2-Command Prompt [https://www.digitalcitizen.life/command-prompt-how-use-basic-commands]
3-[https://professor-excel.com/xml-zip-excel-file-structure/],
4-Ethics in Web Scraping[https://towardsdatascience.com/ethics-in-web-scraping-b96b18136f01]
5-Python: Removing \xa0 from string?[https://stackoverflow.com/questions/10993612/python-removing-xa0-from-string]
6-Beautiful Soup and Unicode Problems[https://stackoverflow.com/questions/19508442/beautiful-soup-and-unicode-problems]
7-Data Vis sample with Tableau[https://public.tableau.com/profile/david.venturi#!/vizhome/BestofRottenTomatoesCriticvs_AudienceScores/BestofRottenTomatoesCriticvs_AudienceScores]
